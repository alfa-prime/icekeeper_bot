from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
import subprocess

from app.core import get_settings

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥)
router = Router()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞)
settings = get_settings()


@router.message(Command(commands=["status"]))
async def get_uptime(message: Message):
    if message.from_user.id != settings.ADMIN_ID:
        # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await message.answer("‚õîÔ∏è –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–±–æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –Ω–∞ –¥–∏—Å–∫–µ
        disk_usage = subprocess.check_output("/usr/bin/df -h", shell=True, text=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é mpstat
        cpu_usage = subprocess.check_output("/usr/bin/mpstat 1 1", shell=True, text=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∑–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1, 5 –∏ 15 –º–∏–Ω—É—Ç —Å –ø–æ–º–æ—â—å—é uptime
        load_avg = subprocess.check_output("/usr/bin/uptime", shell=True, text=True)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status_message = (
            f"üíæ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
            f"–î–∏—Å–∫:\n{disk_usage}\n\n"
            f"–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:\n{cpu_usage.strip()}\n\n"
            f"–°—Ä–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1, 5, 15 –º–∏–Ω—É—Ç:\n{load_avg.strip()}"
        )

        await message.answer(status_message, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
